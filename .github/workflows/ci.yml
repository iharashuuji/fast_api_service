# ワークフローの名前
name: CI PIPELINE

# ワークフローが実行されるきっかけ（トリガー）
on:
  push:
    branches: [ develop ] # developブランチにプッシュされた時
  pull_request:
    branches: [ main ] # mainブランチへのプルリクエストが作成された時

# 実行する一連のタスク（ジョブ）
jobs:
  # フロントエンド用のジョブ
  frontend-ci:
    # ジョブを実行する仮想環境の種類
    runs-on: ubuntu-latest

    # 実行する個々のステップ
    steps:
      # 1. リポジトリのコードを仮想環境にチェックアウトする
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Node.jsの環境をセットアップする
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # 使用するNode.jsのバージョン

      # 3. 依存パッケージをインストールする
      - name: Install Dependencies
        working-directory: frontend
        run: npm install

      # 4. Lint（コード静的解析）を実行する
      - name: Run Lint
        working-directory: frontend
        run: npm run lint

      # 5. テストを実行する
      - name: Run Tests
        working-directory: frontend
        run: npm run test

      # 6. ビルドが成功するか確認する
      - name: Build Project
        working-directory: frontend
        run: npm run build

  # バックエンド用のジョブ
  backend-ci:
    # このジョブもUbuntuの最新環境で実行
    runs-on: ubuntu-latest

    steps:
      # 1. リポジトリのコードをチェックアウト
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Pythonの環境をセットアップ
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # 使用するPythonのバージョン

      # 3. 依存パッケージをインストール
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt

      # 4. Lint（コード静的解析）を実行する
      - name: Run Lint
        run: flake8 . # flake8を使う場合の例

      # 5. テストを実行する
      - name: Run Tests
        run: pytest # pytestを使う場合の例